(define take
  (lambda (lst pos)
    (if (= pos 0)
      '()
      (if (empty? lst)
        '()
        (cons (car lst) (take (cdr lst) (- pos 1)))
        )
      )
    )
  )

(define take-map
  (lambda (lst func pos)
    (if (= pos 0)
      '()
      (if (empty? lst)
        '()
        (cons (func (car lst)) (take-map (cdr lst) func (- pos 1))))))
  )

(define take-filter
  (lambda (lst pred pos)
    (if (= pos 0)
      '()
      (if (empty? lst)
        '()
        (if (pred (car lst))
          (cons (car lst) (take-filter (cdr lst) pred (- pos 1)))
          (take-filter (cdr lst) pred pos))))))

(define sub-size
  (lambda (lst size)
    (if (= (length lst) size)
      (list lst)
      (if (< (length lst) size)
        '()
        (cons (take lst size) (sub-size (cdr lst) size))
      )
    )
  )
)

(define sub-size-map
  (lambda (lst func size)
    (if (= size 0)
      '(())
      (if (empty? lst)
        lst
        (if (< (length lst) size)
          '()
          (cons (take-map lst func size) (sub-size-map (cdr lst) func size))
        )
      )
    )
  )
)

(define root
  (lambda (tree)
    (car tree)
  )
 )

(define left
  (lambda (tree)
    (car (cdr tree))
  )
 )

(define right
  (lambda (tree)
    (car (cdr (cdr tree)))
  )
 )

(define count-node
  (lambda (tree val)
    (if (pair? tree)
        (+ (if (= (root tree) val) 1 0)
            (+ (count-node (right tree) val)
                (count-node (left tree) val))
        )
        (if (= tree val) 1 0)
      )
    )
  )

(define mirror-tree
  (lambda (tree)
    (if (pair? tree)
      (list (root tree) (mirror-tree (right tree)) (mirror-tree (left tree)))
      tree
    )
  )
 )

(define make-ok
  (lambda (val)
    (cons 'ok val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons 'error msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res)
      (eq? (car res) 'ok)
      #f
    ) 
  )
 )

(define error?
  (lambda (res)
    (if (pair? res)
      (eq? (car res) 'error)
      #f
    ) 
  )
 )

(define result?
  (lambda (res)
    (if (pair? res)
      (or (ok? res) (error? res))
      #f
    )
  )
 )

(define result->val
  (lambda (res)
    (if (result? res)
      (cdr res)
      (make-error "Error: not a result")
    )
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if (ok? res)
          (f (result->val res))
          (make-error (result->val res))
      )
    )
  )
)